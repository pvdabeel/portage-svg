digraph prolog {

# *************
# Graph options
# *************

newrank=true;
concentrate=true;
compound=true;
graph [rankdir=LR,fontname=Helvetica,fontsize=10,ranksep=1.5];#, ranksep=2.5, nodesep=0.2];
edge  [arrowhead=vee];
node  [fontname=Helvetica,fontsize=10];

# **********
# The ebuild
# **********

subgraph cluster_leftcol {
color=gray;
label=<<i>ebuild</i>>;
id [label="portage://dev-haskell/splitmix-0.1.0.4", color=red, width=4, href="../dev-haskell/splitmix-0.1.0.4.svg"];
}

# ****************
# The dependencies
# ****************

subgraph cluster_midcol {
color=gray;
label=<<i>dependencies</i>>;
subgraph cluster_compile {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile</i>>;
# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,hscolour,portage://dev-haskell/splitmix-0.1.0.4,[package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,hscolour,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,test,portage://dev-haskell/splitmix-0.1.0.4,[package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,async,greaterequal,[2.2.1,,,2.2.1],[],[]),package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,async,smaller,[2.3,,,2.3],[],[]),package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,base-compat,greaterequal,[0.11.1,,,0.11.1],[],[]),package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,base-compat,smaller,[0.13,,,0.13],[],[]),package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,base-compat-batteries,greaterequal,[0.10.5,,,0.10.5],[],[]),package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,base-compat-batteries,smaller,[0.13,,,0.13],[],[]),package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,hunit,greaterequal,[1.6.0.0,,,1.6.0.0],[],[]),package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,hunit,smaller,[1.7,,,1.7],[],[]),package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,math-functions,greaterequal,[0.3.3.0,,,0.3.3.0],[],[]),package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,math-functions,smaller,[0.4,,,0.4],[],[]),any_of_group([package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-lang,ghc,none,[,,],[],[]),all_of_group([package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,process,greaterequal,[1.0.1.5,,,1.0.1.5],[],[]),package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,process,smaller,[1.7,,,1.7],[],[])])]),package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,random,none,[,,],[],[]),package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,test-framework,greaterequal,[0.8.2.0,,,0.8.2.0],[],[]),package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,test-framework,smaller,[0.9,,,0.9],[],[]),package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,test-framework-hunit,greaterequal,[0.3.0.2,,,0.3.0.2],[],[]),package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,test-framework-hunit,smaller,[0.4,,,0.4],[],[]),package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,tf-random,greaterequal,[0.5,,,0.5],[],[]),package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,tf-random,smaller,[0.6,,,0.6],[],[]),package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,vector,greaterequal,[0.11.0.0,,,0.11.0.0],[],[]),package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,vector,smaller,[0.13,,,0.13],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-haskell,cabal,greaterequal,[2.2.0.1,,,2.2.0.1],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://dev-haskell/splitmix-0.1.0.4,install,no,dev-lang,ghc,greaterequal,[8.4.3,,,8.4.3],any_same_slot,[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

}
subgraph cluster_compileandrun {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile and run</i>>;
}
subgraph cluster_run {
fillcolor="#eeeeee";
style=filled;
label=<<i>run</i>>;
# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://dev-haskell/splitmix-0.1.0.4,run,no,dev-lang,ghc,greaterequal,[8.4.3,,,8.4.3],any_same_slot,[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://dev-haskell/splitmix-0.1.0.4,run,no,dev-lang,ghc,none,[,,],any_same_slot,[use(optenable(profile),none)]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

}
}

# **************
# The candidates
# **************

subgraph cluster_choices {
rank=same;
color=gray;
label=<<i>candidates</i>>;

}

}
