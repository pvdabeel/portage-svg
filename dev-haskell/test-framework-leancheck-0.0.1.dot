digraph prolog {

# *************
# Graph options
# *************

newrank=true;
concentrate=true;
compound=true;
graph [rankdir=LR,fontname=Helvetica,fontsize=10,ranksep=1.5];#, ranksep=2.5, nodesep=0.2];
edge  [arrowhead=vee];
node  [fontname=Helvetica,fontsize=10];

# **********
# The ebuild
# **********

subgraph cluster_leftcol {
color=gray;
label=<<i>ebuild</i>>;
id [label="portage://dev-haskell/test-framework-leancheck-0.0.1", color=red, width=4, href="../dev-haskell/test-framework-leancheck-0.0.1.svg"];
}

# ****************
# The dependencies
# ****************

subgraph cluster_midcol {
color=gray;
label=<<i>dependencies</i>>;
subgraph cluster_compile {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile</i>>;
subgraph cond21118 {
dependency89072 [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4"><TR><TD ROWSPAN="3" CELLPADDING="10">use_conditional</TD></TR><TR><TD>positive</TD></TR><TR><TD>hscolour</TD></TR></TABLE>>, shape=none, color=red];
subgraph pack66932 {
dependency89073 [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4" WIDTH="220"><TR><TD ROWSPAN="6" CELLPADDING="30">pack_dep</TD></TR><TR><TD WIDTH="110">install</TD></TR><TR><TD>dev-haskell</TD></TR><TR><TD>hscolour</TD></TR><TR><TD>none</TD></TR><TR><TD>[,,]</TD></TR></TABLE>>, shape=none, color=blue];
}
dependency89072:e -> dependency89073:w [weight=20,style="dashed",arrowhead="vee"];
}
id:e -> dependency89072:w [weight=20,style="solid",arrowhead="vee"];
subgraph pack66933 {
dependency89074 [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4" WIDTH="220"><TR><TD ROWSPAN="6" CELLPADDING="30">pack_dep</TD></TR><TR><TD WIDTH="110">install</TD></TR><TR><TD>dev-haskell</TD></TR><TR><TD>cabal</TD></TR><TR><TD>greaterequal</TD></TR><TR><TD>[1.18,,,1.18]</TD></TR></TABLE>>, shape=none, color=blue];
}
id:e -> dependency89074:w [weight=20,style="solid",arrowhead="vee"];
subgraph pack66934 {
dependency89075 [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4" WIDTH="220"><TR><TD ROWSPAN="6" CELLPADDING="30">pack_dep</TD></TR><TR><TD WIDTH="110">install</TD></TR><TR><TD>dev-haskell</TD></TR><TR><TD>leancheck</TD></TR><TR><TD>none</TD></TR><TR><TD>[,,]</TD></TR></TABLE>>, shape=none, color=blue];
}
id:e -> dependency89075:w [weight=20,style="solid",arrowhead="vee"];
subgraph pack66935 {
dependency89076 [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4" WIDTH="220"><TR><TD ROWSPAN="6" CELLPADDING="30">pack_dep</TD></TR><TR><TD WIDTH="110">install</TD></TR><TR><TD>dev-haskell</TD></TR><TR><TD>test-framework</TD></TR><TR><TD>none</TD></TR><TR><TD>[,,]</TD></TR></TABLE>>, shape=none, color=blue];
}
id:e -> dependency89076:w [weight=20,style="solid",arrowhead="vee"];
subgraph pack66936 {
dependency89077 [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4" WIDTH="220"><TR><TD ROWSPAN="6" CELLPADDING="30">pack_dep</TD></TR><TR><TD WIDTH="110">install</TD></TR><TR><TD>dev-lang</TD></TR><TR><TD>ghc</TD></TR><TR><TD>greaterequal</TD></TR><TR><TD>[7.4.1,,,7.4.1]</TD></TR></TABLE>>, shape=none, color=blue];
}
id:e -> dependency89077:w [weight=20,style="solid",arrowhead="vee"];
}
subgraph cluster_compileandrun {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile and run</i>>;
}
subgraph cluster_run {
fillcolor="#eeeeee";
style=filled;
label=<<i>run</i>>;
subgraph pack66937 {
dependency89078 [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4" WIDTH="220"><TR><TD ROWSPAN="6" CELLPADDING="30">pack_dep</TD></TR><TR><TD WIDTH="110">run</TD></TR><TR><TD>dev-haskell</TD></TR><TR><TD>leancheck</TD></TR><TR><TD>none</TD></TR><TR><TD>[,,]</TD></TR></TABLE>>, shape=none, color=blue];
}
id:e -> dependency89078:w [weight=20,style="solid",arrowhead="odot"];
subgraph pack66938 {
dependency89079 [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4" WIDTH="220"><TR><TD ROWSPAN="6" CELLPADDING="30">pack_dep</TD></TR><TR><TD WIDTH="110">run</TD></TR><TR><TD>dev-haskell</TD></TR><TR><TD>test-framework</TD></TR><TR><TD>none</TD></TR><TR><TD>[,,]</TD></TR></TABLE>>, shape=none, color=blue];
}
id:e -> dependency89079:w [weight=20,style="solid",arrowhead="odot"];
subgraph pack66939 {
dependency89080 [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4" WIDTH="220"><TR><TD ROWSPAN="6" CELLPADDING="30">pack_dep</TD></TR><TR><TD WIDTH="110">run</TD></TR><TR><TD>dev-lang</TD></TR><TR><TD>ghc</TD></TR><TR><TD>greaterequal</TD></TR><TR><TD>[7.4.1,,,7.4.1]</TD></TR></TABLE>>, shape=none, color=blue];
}
id:e -> dependency89080:w [weight=20,style="solid",arrowhead="odot"];
subgraph pack66940 {
dependency89081 [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4" WIDTH="220"><TR><TD ROWSPAN="6" CELLPADDING="30">pack_dep</TD></TR><TR><TD WIDTH="110">run</TD></TR><TR><TD>dev-lang</TD></TR><TR><TD>ghc</TD></TR><TR><TD>none</TD></TR><TR><TD>[,,]</TD></TR></TABLE>>, shape=none, color=blue];
}
id:e -> dependency89081:w [weight=20,style="solid",arrowhead="odot"];
}
}

# **************
# The candidates
# **************

subgraph cluster_choices {
rank=same;
color=gray;
label=<<i>candidates</i>>;

subgraph choice66932 {
color=black;
nodesep=1;
choice100101118451049711510710110810847104115991111081111171144549465053 [label="portage://dev-haskell/hscolour-1.25", color=red, width=4,href="../dev-haskell/hscolour-1.25.svg"];
choice1001011184510497115107101108108471041159911110811111711445494650524652 [label="portage://dev-haskell/hscolour-1.24.4", color=red, width=4,href="../dev-haskell/hscolour-1.24.4.svg"];
dependency89073:e -> choice100101118451049711510710110810847104115991111081111171144549465053:w [style=dotted,weight="100"];
dependency89073:e -> choice1001011184510497115107101108108471041159911110811111711445494650524652:w [style=dotted,weight="100"];
}
subgraph choice66933 {
color=black;
nodesep=1;
choice100101118451049711510710110810847999798971084551465446514648 [label="portage://dev-haskell/cabal-3.6.3.0", color=red, width=4,href="../dev-haskell/cabal-3.6.3.0.svg"];
choice1001011184510497115107101108108479997989710845514652464946484511449 [label="portage://dev-haskell/cabal-3.4.1.0-r1", color=red, width=4,href="../dev-haskell/cabal-3.4.1.0-r1.svg"];
dependency89074:e -> choice100101118451049711510710110810847999798971084551465446514648:w [style=dotted,weight="100"];
dependency89074:e -> choice1001011184510497115107101108108479997989710845514652464946484511449:w [style=dotted,weight="100"];
}
subgraph choice66934 {
color=black;
nodesep=1;
choice10010111845104971151071011081084710810197110991041019910745484657464948 [label="portage://dev-haskell/leancheck-0.9.10", color=red, width=4,href="../dev-haskell/leancheck-0.9.10.svg"];
choice100101118451049711510710110810847108101971109910410199107454846574651 [label="portage://dev-haskell/leancheck-0.9.3", color=red, width=4,href="../dev-haskell/leancheck-0.9.3.svg"];
dependency89075:e -> choice10010111845104971151071011081084710810197110991041019910745484657464948:w [style=dotted,weight="100"];
dependency89075:e -> choice100101118451049711510710110810847108101971109910410199107454846574651:w [style=dotted,weight="100"];
}
subgraph choice66935 {
color=black;
nodesep=1;
choice100101118451049711510710110810847116101115116451021149710910111911111410745484656465046484511452 [label="portage://dev-haskell/test-framework-0.8.2.0-r4", color=red, width=4,href="../dev-haskell/test-framework-0.8.2.0-r4.svg"];
dependency89076:e -> choice100101118451049711510710110810847116101115116451021149710910111911111410745484656465046484511452:w [style=dotted,weight="100"];
}
subgraph choice66936 {
color=black;
nodesep=1;
choice10010111845108971101034710310499455746504656 [label="portage://dev-lang/ghc-9.2.8", color=red, width=4,href="../dev-lang/ghc-9.2.8.svg"];
choice100101118451089711010347103104994557464846504511452 [label="portage://dev-lang/ghc-9.0.2-r4", color=red, width=4,href="../dev-lang/ghc-9.0.2-r4.svg"];
dependency89077:e -> choice10010111845108971101034710310499455746504656:w [style=dotted,weight="100"];
dependency89077:e -> choice100101118451089711010347103104994557464846504511452:w [style=dotted,weight="100"];
}
subgraph choice66937 {
color=black;
nodesep=1;
choice10010111845104971151071011081084710810197110991041019910745484657464948 [label="portage://dev-haskell/leancheck-0.9.10", color=red, width=4,href="../dev-haskell/leancheck-0.9.10.svg"];
choice100101118451049711510710110810847108101971109910410199107454846574651 [label="portage://dev-haskell/leancheck-0.9.3", color=red, width=4,href="../dev-haskell/leancheck-0.9.3.svg"];
dependency89078:e -> choice10010111845104971151071011081084710810197110991041019910745484657464948:w [style=dotted,weight="100"];
dependency89078:e -> choice100101118451049711510710110810847108101971109910410199107454846574651:w [style=dotted,weight="100"];
}
subgraph choice66938 {
color=black;
nodesep=1;
choice100101118451049711510710110810847116101115116451021149710910111911111410745484656465046484511452 [label="portage://dev-haskell/test-framework-0.8.2.0-r4", color=red, width=4,href="../dev-haskell/test-framework-0.8.2.0-r4.svg"];
dependency89079:e -> choice100101118451049711510710110810847116101115116451021149710910111911111410745484656465046484511452:w [style=dotted,weight="100"];
}
subgraph choice66939 {
color=black;
nodesep=1;
choice10010111845108971101034710310499455746504656 [label="portage://dev-lang/ghc-9.2.8", color=red, width=4,href="../dev-lang/ghc-9.2.8.svg"];
choice100101118451089711010347103104994557464846504511452 [label="portage://dev-lang/ghc-9.0.2-r4", color=red, width=4,href="../dev-lang/ghc-9.0.2-r4.svg"];
dependency89080:e -> choice10010111845108971101034710310499455746504656:w [style=dotted,weight="100"];
dependency89080:e -> choice100101118451089711010347103104994557464846504511452:w [style=dotted,weight="100"];
}
subgraph choice66940 {
color=black;
nodesep=1;
choice10010111845108971101034710310499455746504656 [label="portage://dev-lang/ghc-9.2.8", color=red, width=4,href="../dev-lang/ghc-9.2.8.svg"];
choice100101118451089711010347103104994557464846504511452 [label="portage://dev-lang/ghc-9.0.2-r4", color=red, width=4,href="../dev-lang/ghc-9.0.2-r4.svg"];
dependency89081:e -> choice10010111845108971101034710310499455746504656:w [style=dotted,weight="100"];
dependency89081:e -> choice100101118451089711010347103104994557464846504511452:w [style=dotted,weight="100"];
}
}

}
