digraph prolog {

# *************
# Graph options
# *************

newrank=true;
concentrate=true;
compound=true;
graph [rankdir=LR,fontname=Helvetica,fontsize=10,ranksep=1.5];#, ranksep=2.5, nodesep=0.2];
edge  [arrowhead=vee];
node  [fontname=Helvetica,fontsize=10];

# **********
# The ebuild
# **********

subgraph cluster_leftcol {
color=gray;
label=<<i>ebuild</i>>;
id [label="portage://app-emulation/nemu-3.1.0", color=red, width=4, href="../app-emulation/nemu-3.1.0.svg"];
}

# ****************
# The dependencies
# ****************

subgraph cluster_midcol {
color=gray;
label=<<i>dependencies</i>>;
subgraph cluster_compile {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile</i>>;
# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,dbus,portage://app-emulation/nemu-3.1.0,[package_dependency(portage://app-emulation/nemu-3.1.0,install,no,sys-apps,dbus,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,network-map,portage://app-emulation/nemu-3.1.0,[package_dependency(portage://app-emulation/nemu-3.1.0,install,no,media-gfx,graphviz,none,[,,],[],[use(enable(svg),none)])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,ovf,portage://app-emulation/nemu-3.1.0,[package_dependency(portage://app-emulation/nemu-3.1.0,install,no,dev-libs,libxml2,none,[,,],[slot(2)],[]),package_dependency(portage://app-emulation/nemu-3.1.0,install,no,app-arch,libarchive,none,[,,],any_same_slot,[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,remote-api,portage://app-emulation/nemu-3.1.0,[package_dependency(portage://app-emulation/nemu-3.1.0,install,no,dev-libs,openssl,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-emulation/nemu-3.1.0,install,no,app-emulation,qemu,greaterequal,[6.0.0,,-r3,6.0.0-r3],[],[use(enable(vnc),none),use(enable(virtfs),none),use(enable(spice),none)]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-emulation/nemu-3.1.0,install,no,dev-db,sqlite,none,[,,],[slot(3),equal],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-emulation/nemu-3.1.0,install,no,dev-libs,json-c,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-emulation/nemu-3.1.0,install,no,sys-libs,ncurses,none,[,,],any_same_slot,[use(enable(unicode),positive)]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-emulation/nemu-3.1.0,install,no,virtual,libudev,none,[,,],any_same_slot,[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-emulation/nemu-3.1.0,install,no,virtual,libusb,none,[,,],[slot(1)],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

}
subgraph cluster_compileandrun {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile and run</i>>;
}
subgraph cluster_run {
fillcolor="#eeeeee";
style=filled;
label=<<i>run</i>>;
# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,dbus,portage://app-emulation/nemu-3.1.0,[package_dependency(portage://app-emulation/nemu-3.1.0,run,no,sys-apps,dbus,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,network-map,portage://app-emulation/nemu-3.1.0,[package_dependency(portage://app-emulation/nemu-3.1.0,run,no,media-gfx,graphviz,none,[,,],[],[use(enable(svg),none)])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,ovf,portage://app-emulation/nemu-3.1.0,[package_dependency(portage://app-emulation/nemu-3.1.0,run,no,dev-libs,libxml2,none,[,,],[slot(2)],[]),package_dependency(portage://app-emulation/nemu-3.1.0,run,no,app-arch,libarchive,none,[,,],any_same_slot,[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,remote-api,portage://app-emulation/nemu-3.1.0,[package_dependency(portage://app-emulation/nemu-3.1.0,run,no,dev-libs,openssl,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-emulation/nemu-3.1.0,run,no,app-emulation,qemu,greaterequal,[6.0.0,,-r3,6.0.0-r3],[],[use(enable(vnc),none),use(enable(virtfs),none),use(enable(spice),none)]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-emulation/nemu-3.1.0,run,no,dev-db,sqlite,none,[,,],[slot(3),equal],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-emulation/nemu-3.1.0,run,no,dev-libs,json-c,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-emulation/nemu-3.1.0,run,no,sys-libs,ncurses,none,[,,],any_same_slot,[use(enable(unicode),positive)]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-emulation/nemu-3.1.0,run,no,virtual,libudev,none,[,,],any_same_slot,[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-emulation/nemu-3.1.0,run,no,virtual,libusb,none,[,,],[slot(1)],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

}
}

# **************
# The candidates
# **************

subgraph cluster_choices {
rank=same;
color=gray;
label=<<i>candidates</i>>;

}

}
