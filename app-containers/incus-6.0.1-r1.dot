digraph prolog {

# *************
# Graph options
# *************

newrank=true;
concentrate=true;
compound=true;
graph [rankdir=LR,fontname=Helvetica,fontsize=10,ranksep=1.5];#, ranksep=2.5, nodesep=0.2];
edge  [arrowhead=vee];
node  [fontname=Helvetica,fontsize=10];

# **********
# The ebuild
# **********

subgraph cluster_leftcol {
color=gray;
label=<<i>ebuild</i>>;
id [label="portage://app-containers/incus-6.0.1-r1", color=red, width=4, href="../app-containers/incus-6.0.1-r1.svg"];
}

# ****************
# The dependencies
# ****************

subgraph cluster_midcol {
color=gray;
label=<<i>dependencies</i>>;
subgraph cluster_compile {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile</i>>;
# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,install,no,acct-group,incus,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,install,no,acct-group,incus-admin,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,install,no,app-arch,xz-utils,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,install,no,app-containers,lxc,greaterequal,[5.0.0,,,5.0.0],any_same_slot,[use(optenable(apparmor),none),use(enable(seccomp),positive)]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,install,no,dev-db,sqlite,none,[,,],[slot(3)],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,install,no,dev-libs,cowsql,greaterequal,[1.15.6,,,1.15.6],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,install,no,dev-libs,lzo,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,install,no,dev-libs,raft,greaterequal,[0.22.1,,,0.22.1],any_same_slot,[use(enable(lz4),none)]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,install,no,dev-util,xdelta,greaterequal,[3.0,,,3.0],[],[use(enable(lzma),positive)]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,install,no,net-dns,dnsmasq,none,[,,],[],[use(enable(dhcp),none)]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,install,no,sys-libs,libcap,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,install,no,virtual,udev,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

}
subgraph cluster_compileandrun {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile and run</i>>;
}
subgraph cluster_run {
fillcolor="#eeeeee";
style=filled;
label=<<i>run</i>>;
# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,fuidshift,portage://app-containers/incus-6.0.1-r1,[package_dependency(portage://app-containers/incus-6.0.1-r1,run,weak,app-containers,lxd,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,run,no,acct-group,incus,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,run,no,acct-group,incus-admin,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,run,no,app-arch,xz-utils,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,run,no,app-containers,lxc,greaterequal,[5.0.0,,,5.0.0],any_same_slot,[use(optenable(apparmor),none),use(enable(seccomp),positive)]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,run,no,dev-db,sqlite,none,[,,],[slot(3)],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,run,no,dev-libs,cowsql,greaterequal,[1.15.6,,,1.15.6],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,run,no,dev-libs,lzo,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,run,no,dev-libs,raft,greaterequal,[0.22.1,,,0.22.1],any_same_slot,[use(enable(lz4),none)]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,run,no,dev-util,xdelta,greaterequal,[3.0,,,3.0],[],[use(enable(lzma),positive)]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,run,no,net-dns,dnsmasq,none,[,,],[],[use(enable(dhcp),none)]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,run,no,net-firewall,ebtables,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,run,no,net-firewall,iptables,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,run,no,sys-apps,iproute2,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,run,no,sys-fs,fuse,none,[,,],any_different_slot,[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,run,no,sys-fs,lxcfs,greaterequal,[5.0.0,,,5.0.0],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,run,no,sys-fs,squashfs-tools,none,[,,],[],[use(enable(lzma),none)]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,run,no,sys-libs,libcap,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,run,no,virtual,acl,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://app-containers/incus-6.0.1-r1,run,no,virtual,udev,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

}
}

# **************
# The candidates
# **************

subgraph cluster_choices {
rank=same;
color=gray;
label=<<i>candidates</i>>;

}

}
