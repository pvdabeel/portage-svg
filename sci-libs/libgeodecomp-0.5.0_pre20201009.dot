digraph prolog {

# *************
# Graph options
# *************

newrank=true;
concentrate=true;
compound=true;
graph [rankdir=LR,fontname=Helvetica,fontsize=10,ranksep=1.5];#, ranksep=2.5, nodesep=0.2];
edge  [arrowhead=vee];
node  [fontname=Helvetica,fontsize=10];

# **********
# The ebuild
# **********

subgraph cluster_leftcol {
color=gray;
label=<<i>ebuild</i>>;
id [label="portage://sci-libs/libgeodecomp-0.5.0_pre20201009", color=red, width=4, href="../sci-libs/libgeodecomp-0.5.0_pre20201009.svg"];
}

# ****************
# The dependencies
# ****************

subgraph cluster_midcol {
color=gray;
label=<<i>dependencies</i>>;
subgraph cluster_compile {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile</i>>;
# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,cuda,portage://sci-libs/libgeodecomp-0.5.0_pre20201009,[package_dependency(portage://sci-libs/libgeodecomp-0.5.0_pre20201009,install,no,dev-util,nvidia-cuda-toolkit,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,hpx,portage://sci-libs/libgeodecomp-0.5.0_pre20201009,[package_dependency(portage://sci-libs/libgeodecomp-0.5.0_pre20201009,install,no,sys-cluster,hpx,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,mpi,portage://sci-libs/libgeodecomp-0.5.0_pre20201009,[package_dependency(portage://sci-libs/libgeodecomp-0.5.0_pre20201009,install,no,virtual,mpi,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,opencl,portage://sci-libs/libgeodecomp-0.5.0_pre20201009,[package_dependency(portage://sci-libs/libgeodecomp-0.5.0_pre20201009,install,no,virtual,opencl,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,opencv,portage://sci-libs/libgeodecomp-0.5.0_pre20201009,[package_dependency(portage://sci-libs/libgeodecomp-0.5.0_pre20201009,install,no,media-libs,opencv,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,qt5,portage://sci-libs/libgeodecomp-0.5.0_pre20201009,[package_dependency(portage://sci-libs/libgeodecomp-0.5.0_pre20201009,install,no,dev-qt,qtcore,none,[,,],[slot(5)],[]),package_dependency(portage://sci-libs/libgeodecomp-0.5.0_pre20201009,install,no,dev-qt,qtgui,none,[,,],[slot(5)],[]),package_dependency(portage://sci-libs/libgeodecomp-0.5.0_pre20201009,install,no,dev-qt,qtopengl,none,[,,],[slot(5)],[]),package_dependency(portage://sci-libs/libgeodecomp-0.5.0_pre20201009,install,no,dev-qt,qtwidgets,none,[,,],[slot(5)],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,silo,portage://sci-libs/libgeodecomp-0.5.0_pre20201009,[package_dependency(portage://sci-libs/libgeodecomp-0.5.0_pre20201009,install,no,sci-libs,silo,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://sci-libs/libgeodecomp-0.5.0_pre20201009,install,no,dev-libs,boost,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://sci-libs/libgeodecomp-0.5.0_pre20201009,install,no,dev-libs,libflatarray,tilde,[0.4.0,,_pre20201009,0.4.0_pre20201009],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

}
subgraph cluster_compileandrun {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile and run</i>>;
}
subgraph cluster_run {
fillcolor="#eeeeee";
style=filled;
label=<<i>run</i>>;
# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://sci-libs/libgeodecomp-0.5.0_pre20201009,run,no,dev-libs,boost,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

}
}

# **************
# The candidates
# **************

subgraph cluster_choices {
rank=same;
color=gray;
label=<<i>candidates</i>>;

}

}
