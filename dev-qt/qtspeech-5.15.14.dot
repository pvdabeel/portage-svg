digraph prolog {

# *************
# Graph options
# *************

newrank=true;
concentrate=true;
compound=true;
graph [rankdir=LR,fontname=Helvetica,fontsize=10,ranksep=1.5];#, ranksep=2.5, nodesep=0.2];
edge  [arrowhead=vee];
node  [fontname=Helvetica,fontsize=10];

# **********
# The ebuild
# **********

subgraph cluster_leftcol {
color=gray;
label=<<i>ebuild</i>>;
id [label="portage://dev-qt/qtspeech-5.15.14", color=red, width=4, href="../dev-qt/qtspeech-5.15.14.svg"];
}

# ****************
# The dependencies
# ****************

subgraph cluster_midcol {
color=gray;
label=<<i>dependencies</i>>;
subgraph cluster_compile {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile</i>>;
# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,flite,portage://dev-qt/qtspeech-5.15.14,[package_dependency(portage://dev-qt/qtspeech-5.15.14,install,no,app-accessibility,flite,greaterequal,[2,,,2],[],[use(optenable(alsa),none)]),package_dependency(portage://dev-qt/qtspeech-5.15.14,install,no,dev-qt,qtmultimedia,equal,[5.15.14*,,,5.15.14*],[],[use(optenable(alsa),none)]),use_conditional_group(positive,alsa,portage://dev-qt/qtspeech-5.15.14,[package_dependency(portage://dev-qt/qtspeech-5.15.14,install,no,media-libs,alsa-lib,none,[,,],[],[])])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,test,portage://dev-qt/qtspeech-5.15.14,[package_dependency(portage://dev-qt/qtspeech-5.15.14,install,no,dev-qt,qttest,equal,[5.15.14*,,,5.15.14*],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://dev-qt/qtspeech-5.15.14,install,no,app-accessibility,speech-dispatcher,greaterequal,[0.8.7,,,0.8.7],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://dev-qt/qtspeech-5.15.14,install,no,dev-qt,qtcore,equal,[5.15.14*,,,5.15.14*],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

}
subgraph cluster_compileandrun {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile and run</i>>;
}
subgraph cluster_run {
fillcolor="#eeeeee";
style=filled;
label=<<i>run</i>>;
# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,flite,portage://dev-qt/qtspeech-5.15.14,[package_dependency(portage://dev-qt/qtspeech-5.15.14,run,no,app-accessibility,flite,greaterequal,[2,,,2],[],[use(optenable(alsa),none)]),package_dependency(portage://dev-qt/qtspeech-5.15.14,run,no,dev-qt,qtmultimedia,equal,[5.15.14*,,,5.15.14*],[],[use(optenable(alsa),none)]),use_conditional_group(positive,alsa,portage://dev-qt/qtspeech-5.15.14,[package_dependency(portage://dev-qt/qtspeech-5.15.14,run,no,media-libs,alsa-lib,none,[,,],[],[])])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://dev-qt/qtspeech-5.15.14,run,no,app-accessibility,speech-dispatcher,greaterequal,[0.8.7,,,0.8.7],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://dev-qt/qtspeech-5.15.14,run,no,dev-qt,qtcore,equal,[5.15.14*,,,5.15.14*],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

}
}

# **************
# The candidates
# **************

subgraph cluster_choices {
rank=same;
color=gray;
label=<<i>candidates</i>>;

}

}
