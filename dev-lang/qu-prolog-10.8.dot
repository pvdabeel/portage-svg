digraph prolog {

# *************
# Graph options
# *************

newrank=true;
concentrate=true;
compound=true;
graph [rankdir=LR,fontname=Helvetica,fontsize=10,ranksep=1.5];#, ranksep=2.5, nodesep=0.2];
edge  [arrowhead=vee];
node  [fontname=Helvetica,fontsize=10];

# **********
# The ebuild
# **********

subgraph cluster_leftcol {
color=gray;
label=<<i>ebuild</i>>;
id [label="portage://dev-lang/qu-prolog-10.8", color=red, width=4, href="../dev-lang/qu-prolog-10.8.svg"];
}

# ****************
# The dependencies
# ****************

subgraph cluster_midcol {
color=gray;
label=<<i>dependencies</i>>;
subgraph cluster_compile {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile</i>>;
# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(any_of_group([package_dependency(portage://dev-lang/qu-prolog-10.8,install,no,dev-lang,python,none,[,,],[slot(3.12)],[]),package_dependency(portage://dev-lang/qu-prolog-10.8,install,no,dev-lang,python,none,[,,],[slot(3.11)],[]),package_dependency(portage://dev-lang/qu-prolog-10.8,install,no,dev-lang,python,none,[,,],[slot(3.10)],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,pcre,portage://dev-lang/qu-prolog-10.8,[package_dependency(portage://dev-lang/qu-prolog-10.8,install,no,dev-libs,libpcre2,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,pedro,portage://dev-lang/qu-prolog-10.8,[package_dependency(portage://dev-lang/qu-prolog-10.8,install,no,net-misc,pedro,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,qt5,portage://dev-lang/qu-prolog-10.8,[package_dependency(portage://dev-lang/qu-prolog-10.8,install,no,dev-qt,qtwidgets,none,[,,],[slot(5)],[]),package_dependency(portage://dev-lang/qu-prolog-10.8,install,no,dev-qt,qtgui,none,[,,],[slot(5)],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,readline,portage://dev-lang/qu-prolog-10.8,[package_dependency(portage://dev-lang/qu-prolog-10.8,install,no,app-misc,rlwrap,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://dev-lang/qu-prolog-10.8,install,no,dev-lang,perl,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://dev-lang/qu-prolog-10.8,install,weak,dev-util,rej,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

}
subgraph cluster_compileandrun {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile and run</i>>;
}
subgraph cluster_run {
fillcolor="#eeeeee";
style=filled;
label=<<i>run</i>>;
# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,pcre,portage://dev-lang/qu-prolog-10.8,[package_dependency(portage://dev-lang/qu-prolog-10.8,run,no,dev-libs,libpcre2,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,pedro,portage://dev-lang/qu-prolog-10.8,[package_dependency(portage://dev-lang/qu-prolog-10.8,run,no,net-misc,pedro,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,qt5,portage://dev-lang/qu-prolog-10.8,[package_dependency(portage://dev-lang/qu-prolog-10.8,run,no,dev-qt,qtwidgets,none,[,,],[slot(5)],[]),package_dependency(portage://dev-lang/qu-prolog-10.8,run,no,dev-qt,qtgui,none,[,,],[slot(5)],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,readline,portage://dev-lang/qu-prolog-10.8,[package_dependency(portage://dev-lang/qu-prolog-10.8,run,no,app-misc,rlwrap,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://dev-lang/qu-prolog-10.8,run,weak,dev-util,rej,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

}
}

# **************
# The candidates
# **************

subgraph cluster_choices {
rank=same;
color=gray;
label=<<i>candidates</i>>;

}

}
