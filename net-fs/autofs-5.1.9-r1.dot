digraph prolog {

# *************
# Graph options
# *************

newrank=true;
concentrate=true;
compound=true;
graph [rankdir=LR,fontname=Helvetica,fontsize=10,ranksep=1.5];#, ranksep=2.5, nodesep=0.2];
edge  [arrowhead=vee];
node  [fontname=Helvetica,fontsize=10];

# **********
# The ebuild
# **********

subgraph cluster_leftcol {
color=gray;
label=<<i>ebuild</i>>;
id [label="portage://net-fs/autofs-5.1.9-r1", color=red, width=4, href="../net-fs/autofs-5.1.9-r1.svg"];
}

# ****************
# The dependencies
# ****************

subgraph cluster_midcol {
color=gray;
label=<<i>dependencies</i>>;
subgraph cluster_compile {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile</i>>;
# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(negative,libtirpc,portage://net-fs/autofs-5.1.9-r1,[use_conditional_group(positive,elibc_glibc,portage://net-fs/autofs-5.1.9-r1,[package_dependency(portage://net-fs/autofs-5.1.9-r1,install,no,sys-libs,glibc,none,[,,],[],[use(enable(rpc),negative)])])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,dmalloc,portage://net-fs/autofs-5.1.9-r1,[package_dependency(portage://net-fs/autofs-5.1.9-r1,install,no,dev-libs,dmalloc,none,[,,],[],[use(enable(threads),none)])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,ldap,portage://net-fs/autofs-5.1.9-r1,[package_dependency(portage://net-fs/autofs-5.1.9-r1,install,no,net-nds,openldap,greaterequal,[2.0,,,2.0],any_same_slot,[]),use_conditional_group(positive,sasl,portage://net-fs/autofs-5.1.9-r1,[package_dependency(portage://net-fs/autofs-5.1.9-r1,install,no,dev-libs,cyrus-sasl,none,[,,],[],[]),package_dependency(portage://net-fs/autofs-5.1.9-r1,install,no,dev-libs,libxml2,none,[,,],[],[]),package_dependency(portage://net-fs/autofs-5.1.9-r1,install,no,virtual,krb5,none,[,,],[],[])])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,libtirpc,portage://net-fs/autofs-5.1.9-r1,[package_dependency(portage://net-fs/autofs-5.1.9-r1,install,no,net-libs,libtirpc,none,[,,],any_same_slot,[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,libtirpc,portage://net-fs/autofs-5.1.9-r1,[package_dependency(portage://net-fs/autofs-5.1.9-r1,install,no,net-libs,rpcsvc-proto,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,systemd,portage://net-fs/autofs-5.1.9-r1,[package_dependency(portage://net-fs/autofs-5.1.9-r1,install,no,sys-apps,systemd,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://net-fs/autofs-5.1.9-r1,install,no,net-libs,libnsl,none,[,,],any_same_slot,[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://net-fs/autofs-5.1.9-r1,install,no,sys-apps,util-linux,greaterequal,[2.20,,,2.20],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

}
subgraph cluster_compileandrun {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile and run</i>>;
}
subgraph cluster_run {
fillcolor="#eeeeee";
style=filled;
label=<<i>run</i>>;
# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(negative,libtirpc,portage://net-fs/autofs-5.1.9-r1,[use_conditional_group(positive,elibc_glibc,portage://net-fs/autofs-5.1.9-r1,[package_dependency(portage://net-fs/autofs-5.1.9-r1,run,no,sys-libs,glibc,none,[,,],[],[use(enable(rpc),negative)])])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,dmalloc,portage://net-fs/autofs-5.1.9-r1,[package_dependency(portage://net-fs/autofs-5.1.9-r1,run,no,dev-libs,dmalloc,none,[,,],[],[use(enable(threads),none)])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,ldap,portage://net-fs/autofs-5.1.9-r1,[package_dependency(portage://net-fs/autofs-5.1.9-r1,run,no,net-nds,openldap,greaterequal,[2.0,,,2.0],any_same_slot,[]),use_conditional_group(positive,sasl,portage://net-fs/autofs-5.1.9-r1,[package_dependency(portage://net-fs/autofs-5.1.9-r1,run,no,dev-libs,cyrus-sasl,none,[,,],[],[]),package_dependency(portage://net-fs/autofs-5.1.9-r1,run,no,dev-libs,libxml2,none,[,,],[],[]),package_dependency(portage://net-fs/autofs-5.1.9-r1,run,no,virtual,krb5,none,[,,],[],[])])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,libtirpc,portage://net-fs/autofs-5.1.9-r1,[package_dependency(portage://net-fs/autofs-5.1.9-r1,run,no,net-libs,libtirpc,none,[,,],any_same_slot,[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,selinux,portage://net-fs/autofs-5.1.9-r1,[package_dependency(portage://net-fs/autofs-5.1.9-r1,run,no,sec-policy,selinux-automount,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,systemd,portage://net-fs/autofs-5.1.9-r1,[package_dependency(portage://net-fs/autofs-5.1.9-r1,run,no,sys-apps,systemd,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://net-fs/autofs-5.1.9-r1,run,no,net-libs,libnsl,none,[,,],any_same_slot,[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://net-fs/autofs-5.1.9-r1,run,no,sys-apps,util-linux,greaterequal,[2.20,,,2.20],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

}
}

# **************
# The candidates
# **************

subgraph cluster_choices {
rank=same;
color=gray;
label=<<i>candidates</i>>;

}

}
