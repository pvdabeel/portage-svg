digraph prolog {

# *************
# Graph options
# *************

newrank=true;
concentrate=true;
compound=true;
graph [rankdir=LR,fontname=Helvetica,fontsize=10,ranksep=1.5];#, ranksep=2.5, nodesep=0.2];
edge  [arrowhead=vee];
node  [fontname=Helvetica,fontsize=10];

# **********
# The ebuild
# **********

subgraph cluster_leftcol {
color=gray;
label=<<i>ebuild</i>>;
id [label="portage://net-fs/openafs-1.8.7", color=red, width=4, href="../net-fs/openafs-1.8.7.svg"];
}

# ****************
# The dependencies
# ****************

subgraph cluster_midcol {
color=gray;
label=<<i>dependencies</i>>;
subgraph cluster_compile {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile</i>>;
# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,amd64,portage://net-fs/openafs-1.8.7,[use_conditional_group(positive,tsm,portage://net-fs/openafs-1.8.7,[package_dependency(portage://net-fs/openafs-1.8.7,install,no,app-backup,tsm,none,[,,],[],[])])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,doc,portage://net-fs/openafs-1.8.7,[package_dependency(portage://net-fs/openafs-1.8.7,install,no,app-text,docbook-xsl-stylesheets,none,[,,],[],[]),package_dependency(portage://net-fs/openafs-1.8.7,install,no,app-text,docbook-xml-dtd,none,[,,],[slot(4.3)],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,fuse,portage://net-fs/openafs-1.8.7,[package_dependency(portage://net-fs/openafs-1.8.7,install,no,sys-fs,fuse,none,[,,],[slot(0),equal],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,kauth,portage://net-fs/openafs-1.8.7,[package_dependency(portage://net-fs/openafs-1.8.7,install,no,sys-libs,pam,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,kerberos,portage://net-fs/openafs-1.8.7,[package_dependency(portage://net-fs/openafs-1.8.7,install,no,virtual,krb5,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,modules,portage://net-fs/openafs-1.8.7,[use_conditional_group(positive,kernel_linux,portage://net-fs/openafs-1.8.7,[package_dependency(portage://net-fs/openafs-1.8.7,install,no,sys-apps,kmod,none,[,,],[],[use(enable(tools),none)]),use_conditional_group(positive,dist-kernel,portage://net-fs/openafs-1.8.7,[package_dependency(portage://net-fs/openafs-1.8.7,install,no,virtual,dist-kernel,none,[,,],any_same_slot,[])])])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,modules,portage://net-fs/openafs-1.8.7,[use_conditional_group(positive,kernel_linux,portage://net-fs/openafs-1.8.7,[package_dependency(portage://net-fs/openafs-1.8.7,install,no,virtual,linux-sources,none,[,,],[],[]),package_dependency(portage://net-fs/openafs-1.8.7,install,no,virtual,libelf,none,[,,],[],[])])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,ncurses,portage://net-fs/openafs-1.8.7,[package_dependency(portage://net-fs/openafs-1.8.7,install,no,sys-libs,ncurses,none,[,,],[slot(0),equal],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://net-fs/openafs-1.8.7,install,no,virtual,libintl,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://net-fs/openafs-1.8.7,install,weak,net-fs,openafs-kernel,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

}
subgraph cluster_compileandrun {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile and run</i>>;
}
subgraph cluster_run {
fillcolor="#eeeeee";
style=filled;
label=<<i>run</i>>;
# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,amd64,portage://net-fs/openafs-1.8.7,[use_conditional_group(positive,tsm,portage://net-fs/openafs-1.8.7,[package_dependency(portage://net-fs/openafs-1.8.7,run,no,app-backup,tsm,none,[,,],[],[])])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,doc,portage://net-fs/openafs-1.8.7,[package_dependency(portage://net-fs/openafs-1.8.7,run,no,app-text,docbook-xsl-stylesheets,none,[,,],[],[]),package_dependency(portage://net-fs/openafs-1.8.7,run,no,app-text,docbook-xml-dtd,none,[,,],[slot(4.3)],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,fuse,portage://net-fs/openafs-1.8.7,[package_dependency(portage://net-fs/openafs-1.8.7,run,no,sys-fs,fuse,none,[,,],[slot(0),equal],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,kauth,portage://net-fs/openafs-1.8.7,[package_dependency(portage://net-fs/openafs-1.8.7,run,no,sys-libs,pam,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,kerberos,portage://net-fs/openafs-1.8.7,[package_dependency(portage://net-fs/openafs-1.8.7,run,no,virtual,krb5,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,modules,portage://net-fs/openafs-1.8.7,[use_conditional_group(positive,kernel_linux,portage://net-fs/openafs-1.8.7,[package_dependency(portage://net-fs/openafs-1.8.7,run,no,sys-apps,kmod,none,[,,],[],[use(enable(tools),none)]),use_conditional_group(positive,dist-kernel,portage://net-fs/openafs-1.8.7,[package_dependency(portage://net-fs/openafs-1.8.7,run,no,virtual,dist-kernel,none,[,,],any_same_slot,[])])])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,ncurses,portage://net-fs/openafs-1.8.7,[package_dependency(portage://net-fs/openafs-1.8.7,run,no,sys-libs,ncurses,none,[,,],[slot(0),equal],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,selinux,portage://net-fs/openafs-1.8.7,[package_dependency(portage://net-fs/openafs-1.8.7,run,no,sec-policy,selinux-afs,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://net-fs/openafs-1.8.7,run,no,virtual,libintl,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://net-fs/openafs-1.8.7,run,no,virtual,tmpfiles,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://net-fs/openafs-1.8.7,run,weak,net-fs,openafs-kernel,none,[,,],[],[]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

}
}

# **************
# The candidates
# **************

subgraph cluster_choices {
rank=same;
color=gray;
label=<<i>candidates</i>>;

}

}
