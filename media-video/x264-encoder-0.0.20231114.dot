digraph prolog {

# *************
# Graph options
# *************

newrank=true;
concentrate=true;
compound=true;
graph [rankdir=LR,fontname=Helvetica,fontsize=10,ranksep=1.5];#, ranksep=2.5, nodesep=0.2];
edge  [arrowhead=vee];
node  [fontname=Helvetica,fontsize=10];

# **********
# The ebuild
# **********

subgraph cluster_leftcol {
color=gray;
label=<<i>ebuild</i>>;
id [label="portage://media-video/x264-encoder-0.0.20231114", color=red, width=4, href="../media-video/x264-encoder-0.0.20231114.svg"];
}

# ****************
# The dependencies
# ****************

subgraph cluster_midcol {
color=gray;
label=<<i>dependencies</i>>;
subgraph cluster_compile {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile</i>>;
# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,amd64,portage://media-video/x264-encoder-0.0.20231114,[package_dependency(portage://media-video/x264-encoder-0.0.20231114,install,no,dev-lang,nasm,greaterequal,[2.13,,,2.13],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,ffmpeg,portage://media-video/x264-encoder-0.0.20231114,[package_dependency(portage://media-video/x264-encoder-0.0.20231114,install,no,media-video,ffmpeg,none,[,,],any_same_slot,[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,ffmpegsource,portage://media-video/x264-encoder-0.0.20231114,[package_dependency(portage://media-video/x264-encoder-0.0.20231114,install,no,media-libs,ffmpegsource,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,mp4,portage://media-video/x264-encoder-0.0.20231114,[package_dependency(portage://media-video/x264-encoder-0.0.20231114,install,no,media-video,gpac,greaterequal,[0.5.2,,,0.5.2],any_same_slot,[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,x86,portage://media-video/x264-encoder-0.0.20231114,[package_dependency(portage://media-video/x264-encoder-0.0.20231114,install,no,dev-lang,nasm,greaterequal,[2.13,,,2.13],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://media-video/x264-encoder-0.0.20231114,install,no,media-libs,x264,tilde,[0.0.20231114,,,0.0.20231114],[],[use(equal(interlaced),none),use(equal(threads),none)]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

}
subgraph cluster_compileandrun {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile and run</i>>;
}
subgraph cluster_run {
fillcolor="#eeeeee";
style=filled;
label=<<i>run</i>>;
# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,ffmpeg,portage://media-video/x264-encoder-0.0.20231114,[package_dependency(portage://media-video/x264-encoder-0.0.20231114,run,no,media-video,ffmpeg,none,[,,],any_same_slot,[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,ffmpegsource,portage://media-video/x264-encoder-0.0.20231114,[package_dependency(portage://media-video/x264-encoder-0.0.20231114,run,no,media-libs,ffmpegsource,none,[,,],[],[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,mp4,portage://media-video/x264-encoder-0.0.20231114,[package_dependency(portage://media-video/x264-encoder-0.0.20231114,run,no,media-video,gpac,greaterequal,[0.5.2,,,0.5.2],any_same_slot,[])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://media-video/x264-encoder-0.0.20231114,run,no,media-libs,x264,tilde,[0.0.20231114,,,0.0.20231114],[],[use(equal(interlaced),none),use(equal(threads),none)]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

}
}

# **************
# The candidates
# **************

subgraph cluster_choices {
rank=same;
color=gray;
label=<<i>candidates</i>>;

}

}
