digraph prolog {

# *************
# Graph options
# *************

newrank=true;
concentrate=true;
compound=true;
graph [rankdir=LR,fontname=Helvetica,fontsize=10,ranksep=1.5];#, ranksep=2.5, nodesep=0.2];
edge  [arrowhead=vee];
node  [fontname=Helvetica,fontsize=10];

# **********
# The ebuild
# **********

subgraph cluster_leftcol {
color=gray;
label=<<i>ebuild</i>>;
id [label="portage://media-libs/sdl-mixer-1.2.12_p20221010", color=red, width=4, href="../media-libs/sdl-mixer-1.2.12_p20221010.svg"];
}

# ****************
# The dependencies
# ****************

subgraph cluster_midcol {
color=gray;
label=<<i>dependencies</i>>;
subgraph cluster_compile {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile</i>>;
# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,flac,portage://media-libs/sdl-mixer-1.2.12_p20221010,[package_dependency(portage://media-libs/sdl-mixer-1.2.12_p20221010,install,no,media-libs,flac,greaterequal,[1.2.1,,-r5,1.2.1-r5],any_same_slot,[use(optenable(abi_x86_32),negative),use(optenable(abi_x86_64),negative),use(optenable(abi_x86_x32),negative),use(optenable(abi_mips_n32),negative),use(optenable(abi_mips_n64),negative),use(optenable(abi_mips_o32),negative),use(optenable(abi_s390_32),negative),use(optenable(abi_s390_64),negative)])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,midi,portage://media-libs/sdl-mixer-1.2.12_p20221010,[use_conditional_group(positive,fluidsynth,portage://media-libs/sdl-mixer-1.2.12_p20221010,[package_dependency(portage://media-libs/sdl-mixer-1.2.12_p20221010,install,no,media-sound,fluidsynth,greaterequal,[1.1.6,,-r1,1.1.6-r1],any_same_slot,[use(optenable(abi_x86_32),negative),use(optenable(abi_x86_64),negative),use(optenable(abi_x86_x32),negative),use(optenable(abi_mips_n32),negative),use(optenable(abi_mips_n64),negative),use(optenable(abi_mips_o32),negative),use(optenable(abi_s390_32),negative),use(optenable(abi_s390_64),negative)])]),use_conditional_group(positive,timidity,portage://media-libs/sdl-mixer-1.2.12_p20221010,[package_dependency(portage://media-libs/sdl-mixer-1.2.12_p20221010,install,no,media-sound,timidity++,none,[,,],[],[])])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,mod,portage://media-libs/sdl-mixer-1.2.12_p20221010,[use_conditional_group(positive,mikmod,portage://media-libs/sdl-mixer-1.2.12_p20221010,[package_dependency(portage://media-libs/sdl-mixer-1.2.12_p20221010,install,no,media-libs,libmikmod,greaterequal,[3.3.6,,-r1,3.3.6-r1],[],[use(optenable(abi_x86_32),negative),use(optenable(abi_x86_64),negative),use(optenable(abi_x86_x32),negative),use(optenable(abi_mips_n32),negative),use(optenable(abi_mips_n64),negative),use(optenable(abi_mips_o32),negative),use(optenable(abi_s390_32),negative),use(optenable(abi_s390_64),negative)])]),use_conditional_group(positive,modplug,portage://media-libs/sdl-mixer-1.2.12_p20221010,[package_dependency(portage://media-libs/sdl-mixer-1.2.12_p20221010,install,no,media-libs,libmodplug,greaterequal,[0.8.8.4,,-r1,0.8.8.4-r1],[],[use(optenable(abi_x86_32),negative),use(optenable(abi_x86_64),negative),use(optenable(abi_x86_x32),negative),use(optenable(abi_mips_n32),negative),use(optenable(abi_mips_n64),negative),use(optenable(abi_mips_o32),negative),use(optenable(abi_s390_32),negative),use(optenable(abi_s390_64),negative)])])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,mp3,portage://media-libs/sdl-mixer-1.2.12_p20221010,[use_conditional_group(positive,mad,portage://media-libs/sdl-mixer-1.2.12_p20221010,[package_dependency(portage://media-libs/sdl-mixer-1.2.12_p20221010,install,no,media-libs,libmad,greaterequal,[0.15.1,b,-r8,0.15.1b-r8],[],[use(optenable(abi_x86_32),negative),use(optenable(abi_x86_64),negative),use(optenable(abi_x86_x32),negative),use(optenable(abi_mips_n32),negative),use(optenable(abi_mips_n64),negative),use(optenable(abi_mips_o32),negative),use(optenable(abi_s390_32),negative),use(optenable(abi_s390_64),negative)])]),use_conditional_group(positive,smpeg,portage://media-libs/sdl-mixer-1.2.12_p20221010,[package_dependency(portage://media-libs/sdl-mixer-1.2.12_p20221010,install,no,media-libs,smpeg,greaterequal,[0.4.4,,-r10,0.4.4-r10],[],[use(optenable(abi_x86_32),negative),use(optenable(abi_x86_64),negative),use(optenable(abi_x86_x32),negative),use(optenable(abi_mips_n32),negative),use(optenable(abi_mips_n64),negative),use(optenable(abi_mips_o32),negative),use(optenable(abi_s390_32),negative),use(optenable(abi_s390_64),negative)])])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,vorbis,portage://media-libs/sdl-mixer-1.2.12_p20221010,[package_dependency(portage://media-libs/sdl-mixer-1.2.12_p20221010,install,no,media-libs,libogg,greaterequal,[1.3.0,,,1.3.0],[],[use(optenable(abi_x86_32),negative),use(optenable(abi_x86_64),negative),use(optenable(abi_x86_x32),negative),use(optenable(abi_mips_n32),negative),use(optenable(abi_mips_n64),negative),use(optenable(abi_mips_o32),negative),use(optenable(abi_s390_32),negative),use(optenable(abi_s390_64),negative)]),package_dependency(portage://media-libs/sdl-mixer-1.2.12_p20221010,install,no,media-libs,libvorbis,greaterequal,[1.3.3,,-r1,1.3.3-r1],[],[use(optenable(abi_x86_32),negative),use(optenable(abi_x86_64),negative),use(optenable(abi_x86_x32),negative),use(optenable(abi_mips_n32),negative),use(optenable(abi_mips_n64),negative),use(optenable(abi_mips_o32),negative),use(optenable(abi_s390_32),negative),use(optenable(abi_s390_64),negative)])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://media-libs/sdl-mixer-1.2.12_p20221010,install,no,media-libs,libsdl,greaterequal,[1.2.15,,-r4,1.2.15-r4],[],[use(optenable(abi_x86_32),negative),use(optenable(abi_x86_64),negative),use(optenable(abi_x86_x32),negative),use(optenable(abi_mips_n32),negative),use(optenable(abi_mips_n64),negative),use(optenable(abi_mips_o32),negative),use(optenable(abi_s390_32),negative),use(optenable(abi_s390_64),negative)]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

}
subgraph cluster_compileandrun {
fillcolor="#eeeeee";
style=filled;
label=<<i>compile and run</i>>;
}
subgraph cluster_run {
fillcolor="#eeeeee";
style=filled;
label=<<i>run</i>>;
# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,flac,portage://media-libs/sdl-mixer-1.2.12_p20221010,[package_dependency(portage://media-libs/sdl-mixer-1.2.12_p20221010,run,no,media-libs,flac,greaterequal,[1.2.1,,-r5,1.2.1-r5],any_same_slot,[use(optenable(abi_x86_32),negative),use(optenable(abi_x86_64),negative),use(optenable(abi_x86_x32),negative),use(optenable(abi_mips_n32),negative),use(optenable(abi_mips_n64),negative),use(optenable(abi_mips_o32),negative),use(optenable(abi_s390_32),negative),use(optenable(abi_s390_64),negative)])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,midi,portage://media-libs/sdl-mixer-1.2.12_p20221010,[use_conditional_group(positive,fluidsynth,portage://media-libs/sdl-mixer-1.2.12_p20221010,[package_dependency(portage://media-libs/sdl-mixer-1.2.12_p20221010,run,no,media-sound,fluidsynth,greaterequal,[1.1.6,,-r1,1.1.6-r1],any_same_slot,[use(optenable(abi_x86_32),negative),use(optenable(abi_x86_64),negative),use(optenable(abi_x86_x32),negative),use(optenable(abi_mips_n32),negative),use(optenable(abi_mips_n64),negative),use(optenable(abi_mips_o32),negative),use(optenable(abi_s390_32),negative),use(optenable(abi_s390_64),negative)])]),use_conditional_group(positive,timidity,portage://media-libs/sdl-mixer-1.2.12_p20221010,[package_dependency(portage://media-libs/sdl-mixer-1.2.12_p20221010,run,no,media-sound,timidity++,none,[,,],[],[])])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,mod,portage://media-libs/sdl-mixer-1.2.12_p20221010,[use_conditional_group(positive,mikmod,portage://media-libs/sdl-mixer-1.2.12_p20221010,[package_dependency(portage://media-libs/sdl-mixer-1.2.12_p20221010,run,no,media-libs,libmikmod,greaterequal,[3.3.6,,-r1,3.3.6-r1],[],[use(optenable(abi_x86_32),negative),use(optenable(abi_x86_64),negative),use(optenable(abi_x86_x32),negative),use(optenable(abi_mips_n32),negative),use(optenable(abi_mips_n64),negative),use(optenable(abi_mips_o32),negative),use(optenable(abi_s390_32),negative),use(optenable(abi_s390_64),negative)])]),use_conditional_group(positive,modplug,portage://media-libs/sdl-mixer-1.2.12_p20221010,[package_dependency(portage://media-libs/sdl-mixer-1.2.12_p20221010,run,no,media-libs,libmodplug,greaterequal,[0.8.8.4,,-r1,0.8.8.4-r1],[],[use(optenable(abi_x86_32),negative),use(optenable(abi_x86_64),negative),use(optenable(abi_x86_x32),negative),use(optenable(abi_mips_n32),negative),use(optenable(abi_mips_n64),negative),use(optenable(abi_mips_o32),negative),use(optenable(abi_s390_32),negative),use(optenable(abi_s390_64),negative)])])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,mp3,portage://media-libs/sdl-mixer-1.2.12_p20221010,[use_conditional_group(positive,mad,portage://media-libs/sdl-mixer-1.2.12_p20221010,[package_dependency(portage://media-libs/sdl-mixer-1.2.12_p20221010,run,no,media-libs,libmad,greaterequal,[0.15.1,b,-r8,0.15.1b-r8],[],[use(optenable(abi_x86_32),negative),use(optenable(abi_x86_64),negative),use(optenable(abi_x86_x32),negative),use(optenable(abi_mips_n32),negative),use(optenable(abi_mips_n64),negative),use(optenable(abi_mips_o32),negative),use(optenable(abi_s390_32),negative),use(optenable(abi_s390_64),negative)])]),use_conditional_group(positive,smpeg,portage://media-libs/sdl-mixer-1.2.12_p20221010,[package_dependency(portage://media-libs/sdl-mixer-1.2.12_p20221010,run,no,media-libs,smpeg,greaterequal,[0.4.4,,-r10,0.4.4-r10],[],[use(optenable(abi_x86_32),negative),use(optenable(abi_x86_64),negative),use(optenable(abi_x86_x32),negative),use(optenable(abi_mips_n32),negative),use(optenable(abi_mips_n64),negative),use(optenable(abi_mips_o32),negative),use(optenable(abi_s390_32),negative),use(optenable(abi_s390_64),negative)])])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(use_conditional_group(positive,vorbis,portage://media-libs/sdl-mixer-1.2.12_p20221010,[package_dependency(portage://media-libs/sdl-mixer-1.2.12_p20221010,run,no,media-libs,libogg,greaterequal,[1.3.0,,,1.3.0],[],[use(optenable(abi_x86_32),negative),use(optenable(abi_x86_64),negative),use(optenable(abi_x86_x32),negative),use(optenable(abi_mips_n32),negative),use(optenable(abi_mips_n64),negative),use(optenable(abi_mips_o32),negative),use(optenable(abi_s390_32),negative),use(optenable(abi_s390_64),negative)]),package_dependency(portage://media-libs/sdl-mixer-1.2.12_p20221010,run,no,media-libs,libvorbis,greaterequal,[1.3.3,,-r1,1.3.3-r1],[],[use(optenable(abi_x86_32),negative),use(optenable(abi_x86_64),negative),use(optenable(abi_x86_x32),negative),use(optenable(abi_mips_n32),negative),use(optenable(abi_mips_n64),negative),use(optenable(abi_mips_o32),negative),use(optenable(abi_s390_32),negative),use(optenable(abi_s390_64),negative)])]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

# *** BEGIN UNKNOWN DEPENDENCY TYPE (TODO) ***
# id -> equal(package_dependency(portage://media-libs/sdl-mixer-1.2.12_p20221010,run,no,media-libs,libsdl,greaterequal,[1.2.15,,-r4,1.2.15-r4],[],[use(optenable(abi_x86_32),negative),use(optenable(abi_x86_64),negative),use(optenable(abi_x86_x32),negative),use(optenable(abi_mips_n32),negative),use(optenable(abi_mips_n64),negative),use(optenable(abi_mips_o32),negative),use(optenable(abi_s390_32),negative),use(optenable(abi_s390_64),negative)]))
# *** END UNKNOWN DEPENDENCY TYPE (TODO) ***

}
}

# **************
# The candidates
# **************

subgraph cluster_choices {
rank=same;
color=gray;
label=<<i>candidates</i>>;

}

}
